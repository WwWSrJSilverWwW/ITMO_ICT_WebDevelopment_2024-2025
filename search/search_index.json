{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041e\u0442\u0447\u0435\u0442\u044b \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c","text":"<p>\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0438\u043c\u0438 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b.</p> <p>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</p> <p>\u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f: \u0420\u0435\u0431\u0440\u043e\u0432 \u0421\u0435\u0440\u0433\u0435\u0439 \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447 </p>"},{"location":"LR1/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":""},{"location":"LR1/task1/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"LR1/task1/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:","text":"<p>\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c:</p> <ul> <li>\u041a\u043b\u0438\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 UDP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443.</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440.</li> <li>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043e\u0442\u0432\u0435\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.</li> <li>\u0421\u043e\u043a\u0435\u0442 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f.</li> </ul> <p>\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c:</p> <ul> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 UDP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443.</li> <li>\u0416\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.</li> <li>\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb.</li> <li>\u0426\u0438\u043a\u043b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439.</li> </ul>"},{"location":"LR1/task1/#_3","title":"\u041a\u043e\u0434:","text":"<p>client.py</p> <pre><code>import socket\n\nrequest = 'Hello, server'\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nclient_socket.connect(('localhost', 8080))\n\nclient_socket.send(request.encode())\nresponse, server_address = client_socket.recvfrom(1024)\n\nprint(response.decode())\n\nclient_socket.close()\n</code></pre> <p>server.py</p> <pre><code>import socket\n\nresponse = 'Hello, client'\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_socket.bind(('localhost', 8080))\n\nwhile True:\n    request, client_address = server_socket.recvfrom(1024)\n\n    print(request.decode())\n\n    server_socket.sendto(response.encode(), client_address)\n</code></pre>"},{"location":"LR1/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":""},{"location":"LR1/task2/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p>"},{"location":"LR1/task2/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:","text":"<p>\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c:</p> <ul> <li>\u041a\u043b\u0438\u0435\u043d\u0442 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 TCP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443.</li> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f (a, b, c).</li> <li>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.</li> </ul> <p>\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c:</p> <ul> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 TCP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u0436\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.</li> <li>\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0440\u0435\u0448\u0430\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</li> <li>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438, \u0435\u0441\u043b\u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b.</li> </ul>"},{"location":"LR1/task2/#_3","title":"\u041a\u043e\u0434:","text":"<p>client.py</p> <pre><code>import socket\n\na, b, c = 1, 2, -3\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 8080))\n\nclient_socket.send(f\"{a} {b} {c}\".encode())\nresult = client_socket.recv(1024)\n\nprint(list(map(float, result.decode().split())))\n\nclient_socket.close()\n</code></pre> <p>server.py</p> <pre><code>import socket\nimport math\n\n\ndef solve_quadratic(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant &gt; 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        ans = [x1, x2]\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        ans = [x]\n    else:\n        ans = []\n    return \" \".join(list(map(str, ans)))\n\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('localhost', 8080))\nserver_socket.listen(1)\n\nwhile True:\n    client_socket, client_address = server_socket.accept()\n    request = client_socket.recv(1024).decode()\n\n    try:\n        a1, b1, c1 = map(float, request.split())\n        result = solve_quadratic(a1, b1, c1)\n    except ValueError:\n        result = \"Error: \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430.\"\n\n    client_socket.sendall(result.encode())\n    client_socket.close()\n</code></pre>"},{"location":"LR1/task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":""},{"location":"LR1/task3/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</p>"},{"location":"LR1/task3/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:","text":"<p>\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c:</p> <ul> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 TCP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u0436\u0434\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432.</li> <li>\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u0438 URL.</li> <li>\u0415\u0441\u043b\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u2014 GET, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</li> <li>\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 HTTP-\u043e\u0442\u0432\u0435\u0442 \u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u044b\u043c HTML \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</li> </ul>"},{"location":"LR1/task3/#_3","title":"\u041a\u043e\u0434:","text":"<p>server.py</p> <pre><code>import socket\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('localhost', 8080))\nserver_socket.listen(1)\n\nwhile True:\n    client_connection, client_address = server_socket.accept()\n    request = client_connection.recv(1024).decode()\n\n    html_content = open('index.html', 'r', encoding='utf-8').read()\n\n    http_response = (\n        \"HTTP/1.1 200 OK\\r\\n\"\n        \"Content-Type: text/html; charset=UTF-8\\r\\n\"\n        f\"Content-Length: {len(html_content.encode())}\\r\\n\"\n        \"Connection: close\\r\\n\"\n        \"\\r\\n\"\n        + html_content\n    )\n\n    client_connection.sendall(http_response.encode())\n    client_connection.close()\n</code></pre>"},{"location":"LR1/task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":""},{"location":"LR1/task4/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p>"},{"location":"LR1/task4/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:","text":"<p>\u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c:</p> <ul> <li>\u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u043e\u0435 \u0438\u043c\u044f.</li> <li>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u043e\u0442\u043e\u043a\u0438 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</li> <li>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u0445 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.</li> </ul> <p>\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c:</p> <ul> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 TCP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</li> <li>\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a.</li> <li>\u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043c\u044f \u0438 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0438\u043c \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430\u043c.</li> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f.</li> </ul>"},{"location":"LR1/task4/#_3","title":"\u041a\u043e\u0434:","text":"<p>client.py</p> <pre><code>import socket\nimport threading\n\nname = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f: \")\n\n\ndef receive_messages(client_sock):\n    while True:\n        try:\n            print(client_sock.recv(1024).decode())\n        except:\n            print(\"** \u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. **\")\n            client_sock.close()\n            break\n\n\ndef send_messages(client_sock):\n    while True:\n        try:\n            client_sock.send(input().encode('utf-8'))\n        except:\n            print(\"** \u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. **\")\n            client_sock.close()\n            break\n\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect(('localhost', 8080))\n\nclient_socket.send(name.encode())\n\nreceive_thread = threading.Thread(target=receive_messages, args=(client_socket,))\nreceive_thread.start()\n\nsend_thread = threading.Thread(target=send_messages, args=(client_socket,))\nsend_thread.start()\n\nprint(\"** \u0412\u044b \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0438\u0441\u044c \u043a \u0447\u0430\u0442\u0443! **\")\n</code></pre> <p>server.py</p> <pre><code>import socket\nimport threading\nfrom datetime import datetime\n\nclients = {}\n\n\ndef handle_client(client_sock):\n    try:\n        name = client_sock.recv(1024).decode()\n        clients[client_sock] = name\n        print(f'{name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443.')\n\n        broadcast(f'** {name} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443! **', client_sock)\n\n        while True:\n            message = client_sock.recv(1024).decode()\n            if message:\n                formatted_message = f'[{datetime.now().strftime(\"%H:%M\")}] {name}: {message}'\n                broadcast(formatted_message, client_sock)\n            else:\n                remove_client(client_sock)\n                break\n    except:\n        remove_client(client_sock)\n\n\ndef broadcast(message, client_sock):\n    for client in clients:\n        if client != client_sock:\n            try:\n                client.send(message.encode())\n            except:\n                remove_client(client)\n\n\ndef remove_client(client_sock):\n    if client_sock in clients:\n        name = clients[client_sock]\n        print(f'{name} \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f.')\n        broadcast(f'** {name} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442. **', client_sock)\n        clients.pop(client_sock)\n        client_sock.close()\n\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind(('localhost', 8080))\nserver_socket.listen()\nprint(f'\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d')\n\nwhile True:\n    client_socket, client_address = server_socket.accept()\n    print(f'\u041d\u043e\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}')\n\n    thread = threading.Thread(target=handle_client, args=(client_socket,))\n    thread.start()\n</code></pre>"},{"location":"LR1/task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":""},{"location":"LR1/task5/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p>"},{"location":"LR1/task5/#_2","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:","text":"<p>\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c:</p> <ul> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f TCP-\u0441\u043e\u043a\u0435\u0442 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f.</li> <li>\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 (GET \u0438\u043b\u0438 POST).</li> <li>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 GET \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435 POST \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 JSON-\u0444\u0430\u0439\u043b.</li> <li>\u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 HTTP-\u043e\u0442\u0432\u0435\u0442\u044b.</li> </ul>"},{"location":"LR1/task5/#_3","title":"\u041a\u043e\u0434:","text":"<p>client.py</p> <pre><code>import os\nimport json\nimport socket\nimport urllib.parse\n\n\nclass MyHTTPServer:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.save_file = 'save.json'\n        self.html_file = 'index.html'\n\n    def serve_forever(self):\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.bind((self.host, self.port))\n        server_socket.listen(1)\n\n        while True:\n            client_socket, _ = server_socket.accept()\n            client_socket.settimeout(5)\n            self.serve_client(client_socket)\n            client_socket.close()\n\n    def serve_client(self, client_socket):\n        try:\n            request = client_socket.recv(1024).decode()\n            print(request)\n\n            method, url, _ = self.parse_request(request)\n\n            if method == 'GET':\n                response_body = self.handle_get(url)\n            elif method == 'POST':\n                response_body = self.handle_post(request)\n            else:\n                response_body = \"Method Not Allowed\"\n\n            self.send_response(client_socket, response_body)\n        except Exception:\n            pass\n\n    @staticmethod\n    def parse_request(request):\n        lines = request.split('\\r\\n')\n        request_line = lines[0]\n        method, url, _ = request_line.split(' ')\n        return method, url, _\n\n    @staticmethod\n    def parse_headers(request):\n        lines = request.split('\\r\\n')\n        headers = {}\n        for line in lines[1:]:\n            if line == '':\n                break\n            key, value = line.split(': ', 1)\n            headers[key] = value\n        return headers\n\n    def handle_get(self, url):\n        if url == '/':\n            return self.generate_html_page()\n        else:\n            return \"404 Not Found\"\n\n    def handle_post(self, request):\n        headers = self.parse_headers(request)\n        content_length = int(headers.get('Content-Length', 0))\n        body = request.split('\\r\\n\\r\\n', 1)[1] if content_length &gt; 0 else ''\n\n        try:\n            post_data = urllib.parse.parse_qs(body)\n            discipline = post_data.get('discipline', [''])[0]\n            grade = int(post_data.get('grade', ['0'])[0])\n\n            grades = self.load_grades()\n            if discipline in grades:\n                grades[discipline].append(grade)\n            else:\n                grades[discipline] = [grade]\n            self.save_grades(grades)\n            return \"Data saved successfully!\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    @staticmethod\n    def send_response(client_socket, body):\n        http_response = (\n            \"HTTP/1.1 200 OK\\r\\n\"\n            \"Content-Type: text/html; charset=UTF-8\\r\\n\"\n            f\"Content-Length: {len(body.encode())}\\r\\n\"\n            \"Connection: close\\r\\n\"\n            \"\\r\\n\"\n            + body\n        )\n        client_socket.sendall(http_response.encode())\n\n    def load_grades(self):\n        if os.path.exists(self.save_file):\n            with open(self.save_file, 'r', encoding='utf-8') as file:\n                return json.load(file)\n        return {}\n\n    def save_grades(self, grades):\n        with open(self.save_file, 'w', encoding='utf-8') as file:\n            json.dump(grades, file, ensure_ascii=False, indent=4)\n\n    @staticmethod\n    def generate_table_rows(grades):\n        rows = \"\"\n        for discipline, grade_list in grades.items():\n            grades_str = ', '.join(list(map(str, grade_list)))\n            rows += f'&lt;tr&gt;&lt;td&gt;{discipline}&lt;/td&gt;&lt;td&gt;{grades_str}&lt;/td&gt;&lt;/tr&gt;\\n'\n        return rows\n\n    def generate_html_page(self):\n        with open(self.html_file, 'r', encoding='utf-8') as file:\n            html_template = file.read()\n\n        grades = self.load_grades()\n        table_rows = self.generate_table_rows(grades)\n\n        html_page = html_template.replace('{{ table_rows }}', table_rows)\n        return html_page\n\n\nserver = MyHTTPServer('localhost', 8080)\ntry:\n    server.serve_forever()\nexcept KeyboardInterrupt:\n    pass\n</code></pre>"},{"location":"LR2/step1/","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","text":"<p>\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u0438. \u042f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 User \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c OneToOneField, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0441\u0432\u044f\u0437\u044c \u0441 \u043a\u043b\u0430\u0441\u0441\u043e\u043c. \u0422\u0430\u043a\u0436\u0435 \u0431\u044b\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0430, \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430, \u0432\u044b\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441 \u043e\u0446\u0435\u043d\u043a\u043e\u0439.</p> <p>models.py</p> <pre><code>class Class(models.Model):\n    name = models.CharField(max_length=128)\n    year = models.IntegerField()\n\n    def __str__(self):\n        return f'{self.name}'\n\n\nclass SchoolUser(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    class_id = models.ForeignKey(Class, on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return f'{self.user.first_name} {self.user.last_name}'\n\n\nclass Discipline(models.Model):\n    name = models.CharField(max_length=128)\n\n    def __str__(self):\n        return f'{self.name}'\n\n\nclass Task(models.Model):\n    title = models.CharField(max_length=128)\n    description = models.TextField()\n    issue_date = models.DateField()\n    due_date = models.DateField()\n    discipline_id = models.ForeignKey(Discipline, on_delete=models.CASCADE)\n    class_id = models.ForeignKey(Class, on_delete=models.CASCADE)\n    teacher_id = models.ForeignKey(SchoolUser, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.title} ({self.discipline_id})'\n\n\nclass Grade(models.Model):\n    answer = models.TextField()\n    number = models.IntegerField(null=True, blank=True)\n    submission_date = models.DateField(auto_now_add=True)\n    task_id = models.ForeignKey(Task, on_delete=models.CASCADE)\n    schooluser_id = models.ForeignKey(SchoolUser, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.schooluser_id} - {self.task_id} - {self.number}'\n</code></pre>"},{"location":"LR2/step2/","title":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0443\u0447\u0435\u043d\u0438\u043a\u0430","text":"<p>\u0414\u043b\u044f \u0443\u0447\u0435\u043d\u0438\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b:</p> <ul> <li>\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \"\u0417\u0430\u0434\u0430\u043d\u0438\u044f\" \u0443\u0447\u0435\u043d\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u0432\u0438\u0434\u0435\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u044c \u043a \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e.</li> <li>\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \"\u041e\u0446\u0435\u043d\u043a\u0438\" \u0443\u0447\u0435\u043d\u0438\u043a \u043c\u043e\u0436\u0435\u0442 \u0432\u0438\u0434\u0435\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430\u043c, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u0432\u043e\u0438\u0445 \u043e\u0434\u043d\u043e\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432.</li> </ul> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u044d\u0442\u0438\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c.</p> <p>views.py</p> <pre><code>def homework_list(request):\n    if not request.user.is_authenticated or request.user.is_staff:\n        return redirect('login-user')\n\n    schooluser = get_object_or_404(SchoolUser, user=request.user)\n\n    tasks = Task.objects.select_related('discipline_id', 'class_id') \\\n        .filter(class_id=schooluser.class_id) \\\n        .exclude(grade__schooluser_id=schooluser.id)  \\\n        .order_by('due_date')\n\n    return render(request, 'homework_list.html', {\n        'schooluser': schooluser,\n        'tasks': tasks\n    })\n\n\ndef homework_submit(request, task_id):\n    if not request.user.is_authenticated or request.user.is_staff:\n        return redirect('login-user')\n\n    task = get_object_or_404(Task, id=task_id)\n    schooluser = get_object_or_404(SchoolUser, user=request.user)\n\n    if task.class_id != schooluser.class_id or Grade.objects.filter(task_id=task_id, schooluser_id=schooluser.id).exists():\n        return redirect('homework-list')\n\n    if request.method == 'POST':\n        form = HomeworkSubmissionForm(request.POST)\n        if form.is_valid():\n            grade = form.save(commit=False)\n            grade.schooluser_id = schooluser\n            grade.task_id = task\n            grade.save()\n            return redirect('homework-list')\n    else:\n        form = HomeworkSubmissionForm()\n\n    return render(request, 'homework_submit.html', {\n        'schooluser': schooluser,\n        'form': form,\n        'task': task\n    })\n\n\ndef grade_table(request):\n    if not request.user.is_authenticated or request.user.is_staff:\n        return redirect('login-user')\n\n    current_schooluser = get_object_or_404(SchoolUser, user=request.user)\n    classmates = SchoolUser.objects.filter(class_id=current_schooluser.class_id, user__is_staff=False)\n    disciplines = Discipline.objects.filter(task__grade__schooluser_id__class_id=current_schooluser.class_id).distinct()\n\n    table = []\n\n    for schooluser in classmates:\n        row = [f\"{schooluser.user.first_name} {schooluser.user.last_name}\"]\n\n        for discipline in disciplines:\n            schooluser_grades = Grade.objects.filter(schooluser_id=schooluser, task_id__discipline_id=discipline)\n\n            if schooluser_grades.exists():\n                row.append(', '.join([str(grade.number if grade.number is not None else '\u043d') for grade in schooluser_grades]))\n            else:\n                row.append('\u041d\u0435\u0442 \u043e\u0446\u0435\u043d\u043e\u043a')\n\n        table.append(row)\n\n    return render(request, 'grade_table.html', {\n        'schooluser': current_schooluser,\n        'table': table,\n        'disciplines': disciplines\n    })\n</code></pre>"},{"location":"LR2/step3/","title":"\u0418\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0443\u0447\u0438\u0442\u0435\u043b\u044f","text":"<p>\u0414\u043b\u044f \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u044b:</p> <ul> <li>\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \"\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u043d\u0438\u0435\" \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0432\u0438\u0434\u0435\u0442\u044c \u043f\u0440\u0438\u0441\u043b\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u043b \u044d\u0442\u043e\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u044c, \u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u044c \u043a \u0438\u0445 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u043d\u0438\u044e.</li> <li>\u0412 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u0435\" \u0443\u0447\u0438\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0444\u043e\u0440\u043c\u0443, \u0430 \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0443\u0432\u0438\u0434\u044f\u0442 \u0432\u0441\u0435 \u0443\u0447\u0435\u043d\u0438\u043a\u0438 \u043a\u043b\u0430\u0441\u0441\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0431\u044b\u043b\u043e \u0432\u044b\u0434\u0430\u043d\u043e \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u0435.</li> </ul> <p>\u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0443\u0447\u0435\u043d\u0438\u043a \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u044d\u0442\u0438\u043c \u0440\u0430\u0437\u0434\u0435\u043b\u0430\u043c.</p> <p>views.py</p> <pre><code>def teachers_list(request):\n    if not request.user.is_authenticated or not request.user.is_staff:\n        return redirect('login-user')\n\n    schooluser = get_object_or_404(SchoolUser, user=request.user)\n\n    grades = Grade.objects.select_related('task_id').filter(\n        number__isnull=True,\n        task_id__teacher_id=schooluser.id\n    ).order_by('task_id__due_date')\n\n    return render(request, 'teachers_list.html', {\n        'schooluser': schooluser,\n        'grades': grades\n    })\n\n\ndef teachers_submit(request, grade_id):\n    if not request.user.is_authenticated or not request.user.is_staff:\n        return redirect('login-user')\n\n    grade = get_object_or_404(Grade, id=grade_id)\n    schooluser = get_object_or_404(SchoolUser, user=request.user)\n\n    if grade.task_id.teacher_id.id != schooluser.id or grade.number is not None:\n        return redirect('teachers-list')\n\n    if request.method == 'POST':\n        form = TeachersSubmissionForm(request.POST, instance=grade)\n        if form.is_valid():\n            grade = form.save(commit=False)\n            grade.save()\n            return redirect('teachers-list')\n    else:\n        form = TeachersSubmissionForm()\n\n    return render(request, 'teachers_submit.html', {\n        'schooluser': schooluser,\n        'form': form,\n        'grade': grade\n    })\n\n\ndef teachers_create(request):\n    if not request.user.is_authenticated or not request.user.is_staff:\n        return redirect('login-user')\n\n    schooluser = get_object_or_404(SchoolUser, user=request.user)\n\n    if request.method == 'POST':\n        form = TeachersCreateForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.teacher_id = schooluser\n            task.save()\n            return redirect('teachers-list')\n    else:\n        form = TeachersCreateForm()\n\n    return render(request, 'teachers_create.html', {\n        'schooluser': schooluser,\n        'form': form\n    })\n</code></pre>"},{"location":"LR3/lab/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430","text":""},{"location":"LR3/lab/#_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0437\u0430\u0434\u0430\u0447\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0435\u0439 API \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Django REST Framework (DRF), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u0430\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 Django ORM.</p>"},{"location":"LR3/lab/#_2","title":"\u041f\u0440\u043e\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","text":"<p>\u0421\u043e\u0437\u0434\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439:</p> <ul> <li><code>Publisher</code> \u2014 \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044c \u043a\u043d\u0438\u0433.</li> <li><code>Author</code> \u2014 \u0430\u0432\u0442\u043e\u0440\u044b \u043a\u043d\u0438\u0433.</li> <li><code>Book</code> \u2014 \u043a\u043d\u0438\u0433\u0438 \u0441 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a \u0438\u0437\u0434\u0430\u0442\u0435\u043b\u044f\u043c.</li> <li><code>Library</code> \u2014 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438.</li> <li><code>Hall</code> \u2014 \u0437\u0430\u043b\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435.</li> <li><code>Reader</code> \u2014 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0438 \u0441 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0435 \u043a \u0437\u0430\u043b\u0430\u043c \u0438 \u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li><code>BookAuthor</code> \u2014 \u0441\u0432\u044f\u0437\u044c \u043c\u043d\u043e\u0433\u0438\u0445-\u043a\u043e-\u043c\u043d\u043e\u0433\u0438\u043c \u043c\u0435\u0436\u0434\u0443 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0438 \u0430\u0432\u0442\u043e\u0440\u0430\u043c\u0438.</li> <li><code>BookReader</code> \u2014 \u0443\u0447\u0435\u0442 \u0432\u044b\u0434\u0430\u0447\u0438 \u043a\u043d\u0438\u0433 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u043c \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0441\u0440\u043e\u043a\u043e\u0432.</li> <li><code>BookHall</code> \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0437\u0430\u043b\u0430\u0445.</li> </ul> <p><code>views.py</code></p> <pre><code>from datetime import date\nfrom rest_framework import status\nfrom rest_framework.views import APIView, Response\nfrom rest_framework.generics import RetrieveUpdateDestroyAPIView, ListCreateAPIView\nfrom .serializer import *\n\n\nclass BooksAPIView(ListCreateAPIView):\n    queryset = Book.objects.all()\n\n    def get_serializer_class(self):\n        if self.request.method in ['GET']:\n            return BookReadSerializer\n        return BookWriteSerializer\n\n\nclass BookAPIView(RetrieveUpdateDestroyAPIView):\n    queryset = Book.objects.all()\n\n    def get_serializer_class(self):\n        if self.request.method in ['GET']:\n            return BookReadSerializer\n        return BookWriteSerializer\n\n\nclass AuthorsAPIView(ListCreateAPIView):\n    serializer_class = AuthorSerializer\n    queryset = Author.objects.all()\n\n\nclass AuthorAPIView(RetrieveUpdateDestroyAPIView):\n    serializer_class = AuthorSerializer\n    queryset = Author.objects.all()\n\n\nclass PublishersAPIView(ListCreateAPIView):\n    serializer_class = PublisherSerializer\n    queryset = Publisher.objects.all()\n\n\nclass PublisherAPIView(RetrieveUpdateDestroyAPIView):\n    serializer_class = PublisherSerializer\n    queryset = Publisher.objects.all()\n\n\nclass LibrariesAPIView(ListCreateAPIView):\n    serializer_class = LibrarySerializer\n    queryset = Library.objects.all()\n\n\nclass LibraryAPIView(RetrieveUpdateDestroyAPIView):\n    serializer_class = LibrarySerializer\n    queryset = Library.objects.all()\n\n\nclass HallsAPIView(ListCreateAPIView):\n    queryset = Hall.objects.all()\n\n    def get_serializer_class(self):\n        if self.request.method in ['GET']:\n            return HallReadSerializer\n        return HallWriteSerializer\n\n\nclass HallAPIView(RetrieveUpdateDestroyAPIView):\n    queryset = Hall.objects.all()\n\n    def get_serializer_class(self):\n        if self.request.method in ['GET']:\n            return HallReadSerializer\n        return HallWriteSerializer\n\n\nclass ReadersAPIView(ListCreateAPIView):\n    queryset = Reader.objects.all()\n\n    def get_serializer_class(self):\n        if self.request.method in ['GET']:\n            return ReaderReadSerializer\n        return ReaderWriteSerializer\n\n\nclass ReaderAPIView(RetrieveUpdateDestroyAPIView):\n    queryset = Reader.objects.all()\n\n    def get_serializer_class(self):\n        if self.request.method in ['GET']:\n            return ReaderReadSerializer\n        return ReaderWriteSerializer\n\n\nclass RentBookAPIView(APIView):\n    def post(self, request):\n        serializer = BookReaderRequestSerializer(data=request.data)\n\n        if serializer.is_valid():\n            book_id = serializer.validated_data['book']\n            reader_id = serializer.validated_data['reader']\n\n            try:\n                book = Book.objects.get(id=book_id)\n                reader = Reader.objects.get(id=reader_id)\n            except (Book.DoesNotExist, Reader.DoesNotExist):\n                return Response({\"detail\": \"Book or Reader not found\"}, status=status.HTTP_404_NOT_FOUND)\n\n            hall = reader.hall\n\n            book_hall = BookHall.objects.filter(book=book, hall=hall).first()\n\n            if not book_hall or book_hall.count &lt;= 0:\n                return Response({\"detail\": \"Book not available in this hall\"}, status=status.HTTP_400_BAD_REQUEST)\n\n            book_reader = BookReader(book=book, reader=reader, start_date=date.today())\n            book_reader.save()\n\n            book_hall.count -= 1\n            book_hall.save()\n\n            return Response({\"detail\": \"Book rented successfully\"}, status=status.HTTP_200_OK)\n\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\nclass ReturnBookAPIView(APIView):\n    def post(self, request):\n        serializer = BookReaderRequestSerializer(data=request.data)\n\n        if serializer.is_valid():\n            book_id = serializer.validated_data['book']\n            reader_id = serializer.validated_data['reader']\n\n            try:\n                book = Book.objects.get(id=book_id)\n                reader = Reader.objects.get(id=reader_id)\n            except (Book.DoesNotExist, Reader.DoesNotExist):\n                return Response({\"detail\": \"Book or Reader not found\"}, status=status.HTTP_404_NOT_FOUND)\n\n            hall = reader.hall\n\n            book_hall = BookHall.objects.filter(book=book, hall=hall).first()\n\n            if not book_hall:\n                return Response({\"detail\": \"Book not available in this hall\"}, status=status.HTTP_400_BAD_REQUEST)\n\n            book_reader = BookReader.objects.filter(book=book, reader=reader, end_date=None).first()\n            if not book_reader:\n                return Response({\"detail\": \"Reader doesn't have this book\"}, status=status.HTTP_400_BAD_REQUEST)\n\n            book_reader.end_date = date.today()\n            book_reader.save()\n\n            book_hall.count += 1\n            book_hall.save()\n\n            return Response({\"detail\": \"Book returned successfully\"}, status=status.HTTP_200_OK)\n\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\nclass AddBookAPIView(APIView):\n    def post(self, request):\n        serializer = AddBookRequestSerializer(data=request.data)\n\n        if serializer.is_valid():\n            book_id = serializer.validated_data['book']\n            hall_id = serializer.validated_data['hall']\n            amount = serializer.validated_data['amount'] if 'amount' in serializer.validated_data else 1\n\n            try:\n                book = Book.objects.get(id=book_id)\n                hall = Hall.objects.get(id=hall_id)\n            except (Book.DoesNotExist, Hall.DoesNotExist):\n                return Response({\"detail\": \"Book or Hall not found\"}, status=status.HTTP_404_NOT_FOUND)\n\n            book_hall = BookHall.objects.filter(book=book, hall=hall).first()\n            if not book_hall:\n                book_hall = BookHall(book=book, hall=hall, count=amount)\n            else:\n                book_hall.count += amount\n            book_hall.save()\n\n            return Response({\"detail\": \"Book added successfully\"}, status=status.HTTP_200_OK)\n\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\nclass RemoveBookAPIView(APIView):\n    def post(self, request):\n        serializer = AddBookRequestSerializer(data=request.data)\n\n        if serializer.is_valid():\n            book_id = serializer.validated_data['book']\n            hall_id = serializer.validated_data['hall']\n            amount = serializer.validated_data['amount'] if 'amount' in serializer.validated_data else 1\n\n            try:\n                book = Book.objects.get(id=book_id)\n                hall = Hall.objects.get(id=hall_id)\n            except (Book.DoesNotExist, Hall.DoesNotExist):\n                return Response({\"detail\": \"Book or Hall not found\"}, status=status.HTTP_404_NOT_FOUND)\n\n            book_hall = BookHall.objects.filter(book=book, hall=hall).first()\n\n            if not book_hall:\n                return Response({\"detail\": \"Book not available in this hall\"}, status=status.HTTP_400_BAD_REQUEST)\n\n            book_hall.count -= amount\n            if book_hall.count &lt;= 0:\n                book_hall.delete()\n            else:\n                book_hall.save()\n\n            return Response({\"detail\": \"Book removed successfully\"}, status=status.HTTP_200_OK)\n\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre> <p><code>serializer.py</code></p> <pre><code>from .models import *\nfrom rest_framework import serializers\n\n\nclass PublisherSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Publisher\n        fields = [\"id\", \"name\", \"year\"]\n\n\nclass AuthorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Author\n        fields = [\"id\", \"surname\", \"name\", \"patronymic\"]\n\n\nclass BookReadSerializer(serializers.ModelSerializer):\n    authors = serializers.SerializerMethodField()\n    publisher = PublisherSerializer()\n\n    class Meta:\n        model = Book\n        fields = ['id', 'name', 'publisher', 'cipher', 'authors']\n\n    def get_authors(self, obj):\n        authors = Author.objects.filter(bookauthor__book=obj)\n        return AuthorSerializer(authors, many=True).data\n\n\nclass BookWriteSerializer(serializers.ModelSerializer):\n    authors = serializers.PrimaryKeyRelatedField(\n        many=True, queryset=Author.objects.all(), write_only=True\n    )\n\n    class Meta:\n        model = Book\n        fields = ['id', 'name', 'publisher', 'cipher', 'authors']\n\n    def create(self, validated_data):\n        authors_data = validated_data.pop('authors')\n        book = Book.objects.create(**validated_data)\n        BookAuthor.objects.bulk_create([\n            BookAuthor(book=book, author=author) for author in authors_data\n        ])\n        return book\n\n    def update(self, instance, validated_data):\n        authors_data = validated_data.pop('authors', None)\n        if authors_data is not None:\n            BookAuthor.objects.filter(book=instance).delete()\n            BookAuthor.objects.bulk_create([\n                BookAuthor(book=instance, author=author) for author in authors_data\n            ])\n        return super().update(instance, validated_data)\n\n\nclass LibrarySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Library\n        fields = [\"id\", \"name\", \"address\"]\n\n\nclass HallReadSerializer(serializers.ModelSerializer):\n    library = LibrarySerializer()\n\n    class Meta:\n        model = Hall\n        fields = [\"id\", \"number\", \"name\", \"capacity\", \"library\"]\n\n\nclass HallWriteSerializer(serializers.ModelSerializer):\n    library = serializers.PrimaryKeyRelatedField(queryset=Library.objects.all())\n\n    class Meta:\n        model = Hall\n        fields = [\"id\", \"number\", \"name\", \"capacity\", \"library\"]\n\n    def update(self, instance, validated_data):\n        library_data = validated_data.pop('library', None)\n\n        if library_data:\n            instance.library = Library.objects.get(id=library_data.id)\n\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n\n        instance.save()\n        return instance\n\n\nclass ReaderReadSerializer(serializers.ModelSerializer):\n    hall = HallReadSerializer()\n\n    class Meta:\n        model = Reader\n        fields = [\"id\", \"surname\", \"name\", \"patronymic\", \"ticket\", \"passport\", \"birth_date\", \"address\", \"phone\", \"education\", \"is_academic\", \"hall\"]\n\n\nclass ReaderWriteSerializer(serializers.ModelSerializer):\n    hall = serializers.PrimaryKeyRelatedField(queryset=Hall.objects.all())\n\n    class Meta:\n        model = Reader\n        fields = [\"id\", \"surname\", \"name\", \"patronymic\", \"ticket\", \"passport\", \"birth_date\", \"address\", \"phone\", \"education\", \"is_academic\", \"hall\"]\n\n    def update(self, instance, validated_data):\n        hall_data = validated_data.pop('hall', None)\n\n        if hall_data:\n            instance.hall = Hall.objects.get(id=hall_data.id)\n\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n\n        instance.save()\n        return instance\n\n\nclass BookReaderRequestSerializer(serializers.Serializer):\n    book = serializers.IntegerField()\n    reader = serializers.IntegerField()\n\n\nclass AddBookRequestSerializer(serializers.Serializer):\n    book = serializers.IntegerField()\n    hall = serializers.IntegerField()\n    amount = serializers.IntegerField(required=False, min_value=1)\n</code></pre> <p><code>urls.py</code></p> <pre><code>from django.urls import path\nfrom .views import *\n\napp_name = \"library\"\n\nurlpatterns = [\n   path('books/', BooksAPIView.as_view()),\n   path('books/&lt;int:pk&gt;', BookAPIView.as_view()),\n   path('authors/', AuthorsAPIView.as_view()),\n   path('authors/&lt;int:pk&gt;', AuthorAPIView.as_view()),\n   path('publishers/', PublishersAPIView.as_view()),\n   path('publishers/&lt;int:pk&gt;', PublisherAPIView.as_view()),\n   path('libraries/', LibrariesAPIView.as_view()),\n   path('libraries/&lt;int:pk&gt;', LibraryAPIView.as_view()),\n   path('halls/', HallsAPIView.as_view()),\n   path('halls/&lt;int:pk&gt;', HallAPIView.as_view()),\n   path('readers/', ReadersAPIView.as_view()),\n   path('readers/&lt;int:pk&gt;', ReaderAPIView.as_view()),\n\n   path('rent_book/', RentBookAPIView.as_view()),\n   path('return_book/', ReturnBookAPIView.as_view()),\n   path('add_book/', AddBookAPIView.as_view()),\n   path('remove_book/', RemoveBookAPIView.as_view())\n]\n</code></pre>"},{"location":"LR3/lab/#api","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f API","text":"<p>\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django REST Framework \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d API \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u0447\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u043e\u0439:</p> <ul> <li>CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f <code>Publisher</code>, <code>Author</code>, <code>Book</code>, <code>Library</code>, <code>Hall</code>, <code>Reader</code>.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 \u043a\u043d\u0438\u0433\u0438:</li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0432 \u0437\u0430\u043b\u0435, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c.</li> <li>\u0423\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0437\u0430\u043b\u0435 \u043f\u0440\u0438 \u0432\u044b\u0434\u0430\u0447\u0435.</li> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 <code>BookReader</code> \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c <code>start_date</code>.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u043a\u043d\u0438\u0433\u0438:</li> <li>\u041f\u043e\u0438\u0441\u043a \u0437\u0430\u043f\u0438\u0441\u0438 \u043e \u0432\u044b\u0434\u0430\u0447\u0435 \u043a\u043d\u0438\u0433\u0438 \u0441 \u0441\u0430\u043c\u043e\u0439 \u0440\u0430\u043d\u043d\u0435\u0439 \u0434\u0430\u0442\u043e\u0439.</li> <li>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 <code>end_date</code> \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0430\u0442\u043e\u0439.</li> <li>\u0423\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043d\u0438\u0433\u0438 \u0432 \u0437\u0430\u043b\u0435 \u043f\u0440\u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0435.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0432 \u0437\u0430\u043b:</li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0438 \u0437\u0430\u043b\u0430.</li> <li>\u0415\u0441\u043b\u0438 \u043a\u043d\u0438\u0433\u0430 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u0437\u0430\u043b\u0435, \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 <code>BookHall</code>.</li> <li>\u0415\u0441\u043b\u0438 \u043a\u043d\u0438\u0433\u0430 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u0432 \u0437\u0430\u043b\u0435, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0438\u0437 \u0437\u0430\u043b\u0430:</li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0432 \u0437\u0430\u043b\u0435.</li> <li>\u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u043d\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u044e, \u0437\u0430\u043f\u0438\u0441\u044c \u0438\u0437 <code>BookHall</code> \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f.</li> <li>\u0418\u043d\u0430\u0447\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f.</li> </ul>"},{"location":"LR3/practice/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430","text":""},{"location":"LR3/practice/#31","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1:","text":"<pre><code>Owner(last_name=\"\u041c\u0430\u0432\u0437\u043e\u0432\u0438\u043d\", first_name=\"\u041f\u0435\u0442\u0440\", birth_date=\"2003-07-12\").save()\nOwner(last_name=\"\u0420\u0435\u0431\u0440\u043e\u0432\", first_name=\"\u0421\u0435\u0440\u0433\u0435\u0439\", birth_date=\"2003-12-08\").save()\nOwner(last_name=\"\u0418\u0432\u0430\u043d\u043e\u0432\", first_name=\"\u0410\u043b\u0435\u043a\u0441\u0435\u0439\", birth_date=\"2004-03-15\").save()\nOwner(last_name=\"\u0421\u043c\u0438\u0440\u043d\u043e\u0432\u0430\", first_name=\"\u0410\u043d\u043d\u0430\", birth_date=\"2003-11-22\").save()\nOwner(last_name=\"\u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432\", first_name=\"\u0414\u043c\u0438\u0442\u0440\u0438\u0439\", birth_date=\"2004-01-30\").save()\nOwner(last_name=\"\u041f\u0435\u0442\u0440\u043e\u0432\u0430\", first_name=\"\u041c\u0430\u0440\u0438\u044f\", birth_date=\"2003-05-18\").save()\n\nCar(number=\"\u041d072\u0415\u041c\", mark=\"BMW\", model=\"M3\", color=\"\u041a\u0440\u0430\u0441\u043d\u044b\u0439\").save()\nCar(number=\"\u0410123\u0412\u0421\", mark=\"Audi\", model=\"R8\", color=\"\u0421\u0438\u043d\u0438\u0439\").save()\nCar(number=\"\u041c456\u041e\u0420\", mark=\"Mercedes\", model=\"C-Class\", color=\"\u0411\u0435\u043b\u044b\u0439\").save()\nCar(number=\"\u041a789\u0422\u0421\", mark=\"Toyota\", model=\"Camry\", color=\"\u0427\u0435\u0440\u043d\u044b\u0439\").save()\nCar(number=\"\u0420321\u041d\u041e\", mark=\"Lexus\", model=\"RX 350\", color=\"\u0421\u0435\u0440\u044b\u0439\").save()\n\nLicense(owner=Owner.objects.get(id=1), number=\"7715123456\", type=\"private\", date=\"2024-07-13\").save()\nLicense(owner=Owner.objects.get(id=2), number=\"1234351234\", type=\"private\", date=\"2023-08-13\").save()\nLicense(owner=Owner.objects.get(id=3), number=\"5033123456\", type=\"commercial\", date=\"2023-05-20\").save()\nLicense(owner=Owner.objects.get(id=4), number=\"3412987654\", type=\"private\", date=\"2022-09-15\").save()\nLicense(owner=Owner.objects.get(id=5), number=\"7800456789\", type=\"special\", date=\"2024-01-10\").save()\nLicense(owner=Owner.objects.get(id=6), number=\"4612345678\", type=\"private\", date=\"2023-03-25\").save()\n\nCarOwner(owner=Owner.objects.get(id=1), car=Car.objects.get(id=1), start_date=\"2020-10-10\", end_date=\"2021-10-09\").save()\nCarOwner(owner=Owner.objects.get(id=1), car=Car.objects.get(id=2), start_date=\"2020-11-10\").save()\nCarOwner(owner=Owner.objects.get(id=1), car=Car.objects.get(id=3), start_date=\"2020-12-10\").save()\nCarOwner(owner=Owner.objects.get(id=2), car=Car.objects.get(id=2), start_date=\"2020-11-10\").save()\nCarOwner(owner=Owner.objects.get(id=3), car=Car.objects.get(id=5), start_date=\"2021-09-13\").save()\nCarOwner(owner=Owner.objects.get(id=4), car=Car.objects.get(id=4), start_date=\"2024-05-02\").save()\nCarOwner(owner=Owner.objects.get(id=5), car=Car.objects.get(id=1), start_date=\"2021-10-09\").save()\nCarOwner(owner=Owner.objects.get(id=6), car=Car.objects.get(id=4), start_date=\"2024-05-02\").save()\n\nOwner.objects.all()\nCar.objects.all()\nLicense.objects.all()\nCarOwner.objects.all()\n</code></pre>"},{"location":"LR3/practice/#32","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.2:","text":"<pre><code>Car.objects.filter(mark=\"Toyota\")\nOwner.objects.filter(first_name=\"\u041f\u0435\u0442\u0440\")\nLicense.objects.filter(owner=Owner.objects.get(id=2))\nOwner.objects.filter(car_owner__car__color=\"\u041a\u0440\u0430\u0441\u043d\u044b\u0439\")\nOwner.objects.filter(car_owner__start_date__gte=\"2021-01-01\")\n</code></pre>"},{"location":"LR3/practice/#33","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.3:","text":"<pre><code>License.objects.aggregate(max_date=Max(\"date\"))\nCarOwner.objects.aggregate(max_date=Max(\"end_date\"))\n[[owner, owner.cars] for owner in Owner.objects.annotate(cars=Count(\"car_owner__car__id\"))]\nCar.objects.values(\"mark\").annotate(Count(\"id\"))\nOwner.objects.order_by(\"license_owner__date\")\n</code></pre>"}]}